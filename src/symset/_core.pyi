# pyright: reportIncompatibleMethodOverride=false

from collections.abc import Iterable, Set as AbstractSet
from typing import Any, Literal, Never, Self, final, override

type _AnySet = AbstractSet[Any]

@final
class EmptyType(AbstractSet[Never]):
    @staticmethod
    def get() -> EmptyType: ...
    def __new__(cls: Never, /) -> Never: ...  # raises TypeError
    def __init__(self: Never, /) -> Never: ...  # raises TypeError
    def __bool__(self, /) -> Literal[False]: ...
    @override
    def __len__(self, /) -> Literal[0]: ...
    @override
    def __iter__(self, /) -> Self: ...
    def __next__(self, /) -> Never: ...
    @override
    def __contains__(self, x: object, /) -> Literal[False]: ...
    @override
    def __hash__(self, /) -> int: ...
    @override
    def __eq__(self, other: object, /) -> bool: ...
    @override
    def __ne__(self, other: object, /) -> bool: ...
    @override
    def __lt__(self, other: _AnySet, /) -> bool: ...
    @override
    def __le__(self, other: _AnySet, /) -> Literal[True]: ...
    @override
    def __gt__(self, other: _AnySet, /) -> Literal[False]: ...
    @override
    def __ge__(self, other: _AnySet, /) -> bool: ...
    @override
    def __and__(self, other: _AnySet, /) -> Self: ...
    @override
    def __sub__(self, other: _AnySet, /) -> Self: ...
    def __rsub__[ST: _AnySet](self, other: ST, /) -> ST: ...
    @override
    def __or__[ST: _AnySet](self, other: ST, /) -> ST: ...
    @override
    def __xor__[ST: _AnySet](self, other: ST, /) -> ST: ...
    @override
    def isdisjoint(self, other: Iterable[Any], /) -> Literal[True]: ...
    @property
    def C(self, /) -> UniverseType: ...  # noqa: N802

@final
class UniverseType(AbstractSet[Never]):
    @staticmethod
    def get() -> UniverseType: ...
    def __new__(cls: Never, /) -> Never: ...  # raises TypeError
    def __init__(self: Never, /) -> Never: ...  # raises TypeError
    def __bool__(self, /) -> Literal[True]: ...
    @override
    def __len__(self, /) -> Never: ...  # raises OverflowError
    @override
    def __iter__(self, /) -> Never: ...  # raises OverflowError
    @override
    def __contains__(self, x: object, /) -> Literal[True]: ...
    @override
    def __hash__(self, /) -> int: ...
    @override
    def __eq__(self, other: object, /) -> bool: ...
    @override
    def __ne__(self, other: object, /) -> bool: ...
    @override
    def __lt__(self, other: _AnySet, /) -> Literal[False]: ...
    @override
    def __le__(self, other: _AnySet, /) -> bool: ...
    @override
    def __gt__(self, other: _AnySet, /) -> bool: ...
    @override
    def __ge__(self, other: _AnySet, /) -> Literal[True]: ...
    @override
    def __and__[ST: _AnySet](self, other: ST, /) -> ST: ...
    @override
    def __sub__(self, other: _AnySet, /) -> Self | EmptyType: ...  # might raise
    def __rsub__(self, other: _AnySet, /) -> EmptyType: ...
    @override
    def __or__(self, other: _AnySet, /) -> Self: ...
    @override
    def __xor__[ST: _AnySet](self, other: ST, /) -> ST | EmptyType: ...
    @override
    def isdisjoint(self, other: Iterable[Any], /) -> bool: ...  # raises if not a set
    @property
    def C(self, /) -> EmptyType: ...  # noqa: N802
